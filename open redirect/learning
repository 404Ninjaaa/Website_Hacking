======================================================================================================================================

This is all about the open redirection

From This youtube video
Tittle ==> Day-52 Live Bug Bounty - Hunting For Open Redirect - Bug Bounty Free Course [ Hindi ]
Video Link
https://www.youtube.com/live/Y4qw3sVbPRA?si=NrsgE-DyWoa8A8V7

Websites
https://hacktricks.boitatech.com.br/pentesting-web/open-redirect
https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/open-redirect.md





Open Redirect (status of 3XX)

======================================================================================================================================

Youtube video
Unvalidated redirects and forward are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a url contained within untrusted input. By modifying untrusted url input a malicious site, an attacker may successfully, launch a phishing scam and steal user credentials.

Where ==> login page, check out page, register page, create page, password reset page, any page offering some kind of redirection,


Fix
Allow trusted domains
Use relative path

Strops(‚Äò/dashboard‚Äô, ‚Äò/‚Äô) == 0 (valid)
Strops(‚Äò/http://evil.com‚Äô, ‚Äò/‚Äô) !== 0 (invalid)

Ôøº


We can do html hypertext injection with open redirection
<a href ="https://www.w3schools.com‚Äù>Visit Website</a> we can also use it as a payload



Tools
Waybackurl
openredirectx
https://web.archive.org/
Arjun
Alterx
dnsvalidator

cat targets.txt| openredirex

Chatgpt prompt ==> I need a one liner command which uses waysbackurls tools to fetch all the urls of a target and filter it with grep for possible redirect parameters, including all possible parameters

waybackurls example.com | grep -Ei '([?&](redirect|url|next|return|returnTo|dest|destination|continue|back|goto|ref|redirect_uri|redirect_url|redirectTo|redir|rurl|target|out|view)=)'



Payloads
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Open%20Redirect

Google dorks (google dorks for bug bounty targets)
https://github.com/TakSec/google-dorks-bug-bounty

https://github.com/sushiwushi/bug-bounty-dorks/blob/master/dorks.txt


GPT Dork ( give me google dork that takes a target site and search for all possible open redirection parameters inurl)
site:example.com inurl:redir | inurl:url | inurl:return | inurl=next | inurl=redirect | inurl=out | inurl=continue | inurl=dest | inurl=destination | inurl=go | inurl=page

======================================================================================================================================

Chatgpt
Improper validation of user-supplied input used in URL redirection.

When a web application allows users to specify a destination URL (e.g., via query parameters) and redirects them there without checking or restricting that input, attackers can exploit it.

üß™ Example:
https://example.com/redirect?url=https://evil.com

Why It‚Äôs Dangerous:
* Can be used in phishing attacks to increase trust in malicious links.
* Can help in bypassing security filters.
* Sometimes even leads to SSRF or token leakage.



‚ùå Bad Code (Vulnerable to Open Redirect)

# Flask example (Python)
from flask import Flask, request, redirect

app = Flask(__name__)

@app.route('/redirect')
def unsafe_redirect():
    url = request.args.get('url')  # e.g., ?url=https://evil.com
    return redirect(url)  # ‚ö†Ô∏è No validation!

What‚Äôs wrong?
* Takes the url parameter from user input.
* Redirects to any URL ‚Äî even malicious ones.


‚úÖ Good Code (Secure ‚Äî With Validation)
‚úÖ Option 1: Allow only internal redirects

from flask import Flask, request, redirect, abort, url_for
app = Flask(__name__)

@app.route('/redirect')
def safe_redirect():
    path = request.args.get('url')

    # Only allow relative paths
    if path and path.startswith('/'):
        return redirect(path)
    else:
        abort(400)  # Bad Request

‚úÖ Option 2: Use a whitelist of safe domains
SAFE_DOMAINS = ['yourbank.com', 'yourbank.com/support']

@app.route('/redirect')
def safe_redirect_with_whitelist():
    url = request.args.get('url')
    
    if url:
        from urllib.parse import urlparse
        domain = urlparse(url).netloc

        if domain in SAFE_DOMAINS:
            return redirect(url)
    
    abort(400)



list of common redirect parameters:
redirect  
url  
next  
return  
returnTo  
dest  
destination  
continue  
back  
goto  
ref  
redirect_uri  
redirect_url  
redirectTo  
Ë∑≥ËΩ¨ (Chinese for redirect)  
redir  
rurl  
target  
out  
view
u
r
view
return_path
go
rurl
loginto
image_url
continue
link
lnk

?next=,?url=,?target=,?rurl=,?dest=,?destination=,?redir=,?redirect_uri=,?
redirect_url=,?redirect=,/redirect/,/out?, ?view=,/login?to=,?image_url=,?go=,?
return,?returnTo=,?return_to=,?checkout_url=,?continue=,?
return_path=,success=,data=,qurl=, login, logout,ext=,clickurl=,goto=,rit_url=
, forward_url=,, forward,pic=,callback_url=, jump, jump_url=,click?
u=,originUrl=,origin=,Url=, desturl=,
u=,page=,u1=,action,action_url=,Redirect=,sp_url=,service=,recurl=,j?
url=,url=,uri,u=,q,link=,src=,tc?
src=,linkAddress=,location=, burl=,request=,backurl=, RedirectUrl=, Redirect=
,ReturnUrl=


Two types of open redirect
1. open redirect through GET based parameter
2. open redirect through path fragment
Example of path redirect through path fragment
https://target.com/bing.com




======================================================================================================================================

Overall
waybackurls example.com | grep -Ei '([?&](redirect|url|next|return|returnTo|dest|destination|continue|back|goto|ref|redirect_uri|redirect_url|redirectTo|redir|rurl|target|out|view)=)'

cat sites.txt | openredirex


Live examples
https://youtu.be/qEbivKp5p3s?si=nhFweV9ijiiDLYxh
https://youtu.be/vMUBN9-w9gI?si=ny5iJZwpYXCmAwN7



https://youtu.be/RNCy2X10bqM?si=GAqPyPJ-UyydWn68

Oralyzer Tool
paramspider -d testphp.vulnweb.com
python3 oralyzer.py -u http://testphp.vulnweb.com/redir.php?r=FUZZ&user=xyz





======================================================================================================================================
PortSwigger Labs

DOM-based open redirection
https://portswigger.net/web-security/dom-based/open-redirection

<a href='#' onclick='returnUrl = /url=(https?:\/\/.+)/.exec(location); location.href = returnUrl ? returnUrl[1] : "/"'>Back to Blog</a>
Checks if there is url and https or not 

üß† JavaScript Part in Detail:

returnUrl = /url=(https?:\/\/.+)/.exec(location);
What it does:
* /url=(https?:\/\/.+)/ is a regular expression (RegEx).
    * It looks for a string like:‚Ä®url=https://example.com
* .exec(location) runs the RegEx on the location object.
    * location usually means window.location, which refers to the current page's URL (e.g., location.href).
* However, here they‚Äôve forgotten to use .href, so it will be undefined or object-like.
* Correct version should be:‚Ä®js‚Ä®CopyEdit‚Ä®‚Ä®‚Ä®/url=(https?:\/\/.+)/.exec(location.href)
* ‚Ä®‚Ä®
üí° So, as written, this code may not work correctly unless the browser treats location as location.href implicitly.

Then:
location.href = returnUrl ? returnUrl[1] : "/";
* This line redirects the browser:
    * If returnUrl exists (i.e., the RegEx matched something),
        * returnUrl[1] contains the captured URL (like https://example.com).
        * Redirect to that URL.
    * Otherwise,
        * Redirect to the root / (home page or main blog page).




======================================================================================================================================


